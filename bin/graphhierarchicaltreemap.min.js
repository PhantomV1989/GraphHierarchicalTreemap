// https://javascript-minifier.com/
let GraphHierarchicalTreemap={minPxSize:10,maxDepth:10,pixelCorrection:8,xPortCount:1,yPortCount:1,connectivityGraphs:new Map,rectPorts:new Map,drawnLines:new Map,drawnLinks:new Map,depthPadding:new Map,coloring:{line:void 0,rect:void 0}};class Point{constructor(e,r){this.x=e,this.y=r}getUniqueKey(){return this.x+"_"+this.y}checkSame(e){return this.x==e.x&&this.y==e.y}}class HierarchicalNode{constructor(e,r){this.name=e,this.value=r,this.drawn=!1,this.children=new Map}addChild(e){this.children.set(e.name,e)}addGrandchild(e,r){this.find(e).addChild(r)}find(e){if(0==e.length)return this;if(1==e.length)return this.children.get(e[0]);if(e.length>1){let r=e[0];if(this.children.has(r))return this.children.get(r).find(e.slice(1))}}updateDrawn(e){let r=this.find(e);r&&(r.drawn=!0)}createImmediateObject(){let e=this._createMapObject();return this.children.forEach(r=>e.children.push(r._createMapObject())),e}_createMapObject(){return{n:this.name,v:this.value,children:[]}}}class HierarchicalLinks{}let RootNode=new HierarchicalNode("root",0);class Snappables{constructor(){this.x=new Set,this.y=new Set}}function CalculateConnectivity(e,r){let t=new Map,a=new Snappables;r=Math.round(r/2);let i=$(".p"+e.replace(/\./g,"\\."));function n(e,r){return("x"==r?a.x:a.y).forEach(r=>{Math.abs(e-r)<=GraphHierarchicalTreemap.pixelCorrection&&(e=r)}),"x"==r?a.x.add(e):a.y.add(e),e}function c(e,r){var a,i;t.has(e)||t.set(e,new Set),t.has(r)||t.set(r,new Set),null===(a=t.get(e))||void 0===a||a.add(r),null===(i=t.get(r))||void 0===i||i.add(e)}function l(e,r,t){let a=[],i=(r-e)/(t+1);for(let r=0;r<t+1;r++)a.push(Math.round(e+i*r));return a.push(r),a}let h=GraphHierarchicalTreemap.rectPorts.get(e),o=Array();if(null!=h)for(let e=0;e<h.length;e++){let t=new Point(h[e].x,h[e].y);e<2*GraphHierarchicalTreemap.xPortCount?t.y=n(e%2==0?t.y+r:t.y-r,"y"):t.x=n(e%2==0?t.x-r:t.x+r,"x"),c(h[e].getUniqueKey(),t.getUniqueKey()),o.push(t)}function p(e,r){let t=function(e,r){if(o!=[])for(let t=0;t<o.length;t++){let a=o[t];if(t<2*GraphHierarchicalTreemap.xPortCount){if(a.x<=r.x&&a.x>=e.x&&e.y==a.y&&r.y==e.y)return a}else if(a.y<=r.y&&a.y>=e.y&&a.x==e.x&&e.x==r.x)return a}}(e,r),a=e.getUniqueKey(),i=r.getUniqueKey();if(t)if(t!=r){let e=t.getUniqueKey();c(a,e),c(e,i)}else c(a,i);else c(a,i)}function s(e,r,t){p(new Point(e,t),new Point(r,t))}function d(e,r,t){p(new Point(e,r),new Point(e,t))}for(let e=0;e<i.length;e++){let t=+i[e].getAttribute("x")-r,a=+i[e].getAttribute("y")-r,h=i[e].firstChild;GraphHierarchicalTreemap.rectPorts.set(h.id,Array());let o=+h.style.width.replace("px","")+2*r,p=+h.style.height.replace("px","")+2*r;t=n(t,"x"),a=n(a,"y");let u=n(t+o,"x"),f=n(a+p,"y"),g=l(t,u,GraphHierarchicalTreemap.xPortCount),m=l(a,f,GraphHierarchicalTreemap.yPortCount);for(let e=0;e<g.length;e++)e>0&&e<g.length-1&&(c(g[e]+"_"+a,g[e]+"_"+(a+r)),GraphHierarchicalTreemap.rectPorts.get(h.id).push(new Point(g[e],a+r)),c(g[e]+"_"+f,g[e]+"_"+(f-r)),GraphHierarchicalTreemap.rectPorts.get(h.id).push(new Point(g[e],f-r))),e<g.length-1&&(s(g[e],g[e+1],a),s(g[e],g[e+1],f));for(let e=0;e<m.length;e++)e>0&&e<m.length-1&&(c(u-r+"_"+m[e],u+"_"+m[e]),GraphHierarchicalTreemap.rectPorts.get(h.id).push(new Point(u-r,m[e])),c(t+r+"_"+m[e],t+"_"+m[e]),GraphHierarchicalTreemap.rectPorts.get(h.id).push(new Point(t+r,m[e]))),e<m.length-1&&(c(t+"_"+m[e+1],t+"_"+m[e]),c(u+"_"+m[e+1],u+"_"+m[e]),d(t,m[e],m[e+1]),d(u,m[e],m[e+1]))}return t}function DebugDrawConnectivity(e,r){const t=d3.select("#root");let a=e.keys();for(;;){let i=a.next();if(i.done)break;let n=i.value,c=n.split("_"),l=+c[0],h=+c[1];e.get(n).forEach(e=>{let a=+(e=e.split("_"))[0],i=+e[1];t.append("line").style("stroke","red").style("stroke-width",r/5).attr("x1",l).attr("y1",h).attr("x2",a).attr("y2",i)})}}function FindBestPath(e,r,t){if(e in GraphHierarchicalTreemap.drawnLinks&&r in GraphHierarchicalTreemap.drawnLinks[e])return GraphHierarchicalTreemap.drawnLinks[e][r];e in GraphHierarchicalTreemap.drawnLinks||(GraphHierarchicalTreemap.drawnLinks[e]=new Map),r in GraphHierarchicalTreemap.drawnLinks[e]||(GraphHierarchicalTreemap.drawnLinks[e][r]=Array());let a=[[e]],i=new Set([e]);for(""==t&&(t="root");a.length>0;){let n=a.shift(),c=n.slice(-1)[0],l=[];GraphHierarchicalTreemap.connectivityGraphs[t].get(c).forEach(e=>{i.has(e)||l.push(e)});for(let t=0;t<l.length;t++){let c=l[t];if(c==r)return GraphHierarchicalTreemap.drawnLinks[e][r]=n.concat(c),GraphHierarchicalTreemap.drawnLinks[e][r];i.add(c),a.push(n.concat(c))}}throw"No path found, please increase pixelCorrection"}function DrawLinks(e,r){if(e in GraphHierarchicalTreemap.drawnLinks&&r in GraphHierarchicalTreemap.drawnLinks[e])return GraphHierarchicalTreemap.drawnLinks[e][r];if(e==r)return[];if(e.startsWith(r)||r.startsWith(e))return[];let t=e.split("."),a=r.split("."),i=t.length,n=a.length,c=Math.max(i,n);function l(e,r){const t=d3.select("#root");r in GraphHierarchicalTreemap.drawnLines||(GraphHierarchicalTreemap.drawnLines[r]=new Set);for(let a=0;a<e.length-1;a++){let i=[e[a],e[a+1]].sort().join(".");if(GraphHierarchicalTreemap.drawnLines[r].has(i))continue;let n=e[a].split("_"),c=+n[0],l=+n[1],h=e[a+1].split("_"),o=+h[0],p=+h[1];t.insert("line",".depth"+(r+1)).style("stroke",GraphHierarchicalTreemap.coloring.line(r)).style("stroke-width",GraphHierarchicalTreemap.depthPadding[r-1]/3).attr("stroke-linecap","round").attr("x1",c).attr("y1",l).attr("x2",o).attr("y2",p);GraphHierarchicalTreemap.drawnLines[r].add(i)}}let h=Math.min(i,n),o=[],p=0;for(let e=1;e<=h;e++){let r=t.slice(0,e).join("."),i=a.slice(0,e).join(".");if(r!=i){o=FindBestPath(GraphHierarchicalTreemap.rectPorts.get(r)[0].getUniqueKey(),GraphHierarchicalTreemap.rectPorts.get(i)[1].getUniqueKey(),t.slice(0,e-1).join(".")),p=e;for(let r=e;r<=c;r++)l(o,r);break}}if(o.length>0){let e=t.slice(0,p).join(".");for(let r=p+1;r<=i;r++){let a=t.slice(0,r).join("."),i=GraphHierarchicalTreemap.rectPorts.get(a)[0].getUniqueKey(),n=GraphHierarchicalTreemap.rectPorts.get(e)[0].getUniqueKey();if(n!=o[0])throw"Mismatched ports";let h=FindBestPath(i,n,t.slice(0,r-1).join("."));for(let e=r;e<=c;e++)l(h,e);o=h.slice(0,-1).concat(o),e=a}let r=a.slice(0,p).join(".");for(let e=p+1;e<=n;e++){let t=a.slice(0,e).join("."),i=GraphHierarchicalTreemap.rectPorts.get(t)[1].getUniqueKey(),n=GraphHierarchicalTreemap.rectPorts.get(r)[1].getUniqueKey();if(n!=o[o.length-1])throw"Mismatched ports";let h=FindBestPath(n,i,a.slice(0,e-1).join("."));for(let r=e;r<=c;r++)l(h,r);o=o.slice(0,-1).concat(h),r=t}return o}console.log("Bug: diff parents")}function drawGraphHierarchicalTreemap(e,r,t,a,i=!1,n){if(!n&&"root"==e.n){RootNode.name=e.n,RootNode.value=e.v,n=[],GraphHierarchicalTreemap.coloring.rect||(GraphHierarchicalTreemap.coloring.rect=t||createDefaultColorScheme(e)),GraphHierarchicalTreemap.coloring.line||(GraphHierarchicalTreemap.coloring.line=a||d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateSinebow));let i=new Map;Object.keys(r).forEach(e=>{e in i||(i[e]=new Map),r[e].forEach(r=>{r in i||(i[r]=new Map),i[e][r]=!0,i[r][e]=!1})}),r=i}createHierarchicalTreemap(e,r,i,n)}function drawTreemap(e,r,t,a){let i=!1,n="root"==e.n?0:a.length+1;if(0==e.children.length)return!0;let c=a.concat([e.n]).join("."),l="#"+c;l=l.replace(/\./g,"\\.");let h=$(l)[0],o=+h.style.width.replace("px",""),p=+h.style.height.replace("px",""),s=o/30+n;n in GraphHierarchicalTreemap.depthPadding||(GraphHierarchicalTreemap.depthPadding[n]=s),e.v=0;const d=(e=>d3.treemap().tile(d3.treemapSquarify.ratio(1.1)).size([o,p]).paddingOuter(s).paddingInner(s).round(!0)(d3.hierarchy(e).sum(e=>e.v)))(e);let u=d3.group(d,e=>e.depth),f="#g-"+c;f=f.replace(/\./g,"\\.");let g=$(f)[0],m=null==g?0:+g.getAttribute("x"),y=null==g?0:+g.getAttribute("y"),w=u.get(0),x=u.get(1);function H(e,r,t){if(e.x1-e.x0<GraphHierarchicalTreemap.minPxSize||e.y1-e.y0<GraphHierarchicalTreemap.minPxSize)i=!0;else if(!RootNode.find(r).drawn){let a=d3.select("#root").append("g"),i="p"+(0==r.length?"graphhierarchicaltreemap":1==r.length?"root":r.slice(0,-1).join(".")),n="depth"+(0==r.length?"-":r.slice(0,-1).length+1);a.attr("transform",`translate(${m+e.x0},${y+e.y0})`).attr("x",m+e.x0).attr("y",y+e.y0).attr("class",[i,n].join(" ")).attr("id","g-"+r.join("."));let c=GraphHierarchicalTreemap.coloring.rect(r[0])(t),l=a.append("rect").attr("id",r.join(".")).style("width",e.x1-e.x0+"px").style("height",e.y1-e.y0+"px");"root"!=e.data.n&&l.style("fill",c),RootNode.updateDrawn(r)}}let T="root"==e.n?[]:a.concat([e.n]);w.forEach(e=>H(e,T,n)),x.forEach(r=>H(r,T.concat([r.data.n]),"root"==e.n?n:n+1));let G=CalculateConnectivity(0==T.length?"root":T.join("."),s);return GraphHierarchicalTreemap.connectivityGraphs[a.concat([e.n]).join(".")]=G,t&&DebugDrawConnectivity(G,s),i||e.children.forEach(t=>{let i="root"==e.n?t.n:a.concat([e.n]).concat([t.n]).join(".");if(i in r){let e=r[i];Object.keys(e).forEach(r=>{let t=RootNode.find(r.split("."));if(t&&t.drawn){e[r]?DrawLinks(i,r):DrawLinks(r,i)}})}}),i}function createDefaultColorScheme(e){let r=[d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateCool),d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateSinebow),d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateWarm),d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateRainbow)],t=new Map;return e.c.forEach(a=>{let i=Math.floor(Math.random()*e.c.length);t.set(a.n,r[i])}),function(e){return t.get(e)?t.get(e):d3.scaleSequential([GraphHierarchicalTreemap.maxDepth,0],d3.interpolateBlues)}}function createHierarchicalTreemap(e,r,t=!1,a){let i="root"==e.n?[]:a.concat([e.n]);e.c.forEach(e=>RootNode.addGrandchild(i,new HierarchicalNode(e.n,e.v))),drawTreemap(RootNode.find(i).createImmediateObject(),r,t,a)||("root"!=e.n&&(a=a.concat(e.n)),e.c.forEach(e=>{setTimeout(()=>{createHierarchicalTreemap(e,r,t,a)},0)}))}
